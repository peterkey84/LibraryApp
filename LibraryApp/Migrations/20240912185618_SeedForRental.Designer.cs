// <auto-generated />
using System;
using LibraryApp.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryApp.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20240912185618_SeedForRental")]
    partial class SeedForRental
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryApp.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1530, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jan",
                            LastName = "Kochanowski"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1898, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jan",
                            LastName = "Brzechwa"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1923, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Wisława",
                            LastName = "Szymborska"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1921, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Stanisław",
                            LastName = "Lem"
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1966, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Marek",
                            LastName = "Krajweski"
                        });
                });

            modelBuilder.Entity("LibraryApp.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Jest to fraszka napisana na zdrowie i dla zdrowia wszystkich",
                            Title = "Na zdrowie"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CreatedDate = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Jest to pieśń o Sobótce",
                            Title = "Pieśń świętojańska o Sobótce"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            CreatedDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bajka dla dzieci o leniu co nić nie robi cały dzień",
                            Title = "Leń"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bardzo zabawna rymowanka o nieistniejących wyspach",
                            Title = "Na wyspach Bergamutach"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            CreatedDate = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Najpopularniejszym chyba wierszem",
                            Title = "Nic dwa razy się nie zdarza/ i nie zdarzy"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 4,
                            CreatedDate = new DateTime(2021, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "To najsłynniejsza powieść Stanisława Lema",
                            Title = "Solaris"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 5,
                            CreatedDate = new DateTime(2020, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Zbiór opowiadań o komisarzu Popielskim",
                            Title = "Erynie"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 5,
                            CreatedDate = new DateTime(1999, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Zbiór opowiadań o komisarzu Mocku",
                            Title = "Śmierć w Breslau"
                        });
                });

            modelBuilder.Entity("LibraryApp.Entities.BookCopy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("EAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookCopies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            EAN = "5012345678900",
                            Quantity = 50
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            EAN = "9780201379624",
                            Quantity = 50
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            EAN = "8000500310429",
                            Quantity = 510
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            EAN = "4029764001805",
                            Quantity = 10
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            EAN = "3800029146455",
                            Quantity = 100
                        },
                        new
                        {
                            Id = 6,
                            BookId = 6,
                            EAN = "8710123456789",
                            Quantity = 320
                        },
                        new
                        {
                            Id = 7,
                            BookId = 7,
                            EAN = "5051234567894",
                            Quantity = 99
                        },
                        new
                        {
                            Id = 8,
                            BookId = 8,
                            EAN = "4006381333931",
                            Quantity = 111
                        });
                });

            modelBuilder.Entity("LibraryApp.Entities.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookCopyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfLoan")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfReturn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookCopyId");

                    b.HasIndex("UserId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookCopyId = 1,
                            DateOfLoan = new DateTime(2024, 9, 12, 20, 56, 18, 333, DateTimeKind.Local).AddTicks(7827),
                            DateOfReturn = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 0m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookCopyId = 1,
                            DateOfLoan = new DateTime(2024, 9, 12, 20, 56, 18, 333, DateTimeKind.Local).AddTicks(7922),
                            DateOfReturn = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 0m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookCopyId = 1,
                            DateOfLoan = new DateTime(2024, 9, 12, 20, 56, 18, 333, DateTimeKind.Local).AddTicks(7924),
                            DateOfReturn = new DateTime(2024, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 0m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            BookCopyId = 1,
                            DateOfLoan = new DateTime(2024, 9, 12, 20, 56, 18, 333, DateTimeKind.Local).AddTicks(7926),
                            DateOfReturn = new DateTime(2024, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 0m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            BookCopyId = 1,
                            DateOfLoan = new DateTime(2024, 9, 12, 20, 56, 18, 333, DateTimeKind.Local).AddTicks(7929),
                            DateOfReturn = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 0m,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            BookCopyId = 1,
                            DateOfLoan = new DateTime(2024, 9, 12, 20, 56, 18, 333, DateTimeKind.Local).AddTicks(7931),
                            DateOfReturn = new DateTime(2024, 10, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 0m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            BookCopyId = 1,
                            DateOfLoan = new DateTime(2024, 9, 12, 20, 56, 18, 333, DateTimeKind.Local).AddTicks(7933),
                            DateOfReturn = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 0m,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("LibraryApp.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Gdańsk",
                            ContactNumber = "888333222",
                            DateOfBirth = new DateTime(1984, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jan@kowalksi.pl",
                            FirstName = "Jan",
                            LastName = "Kowalski",
                            PostalCode = "80-110",
                            Street = "Grunwaldzka"
                        },
                        new
                        {
                            Id = 2,
                            City = "Gdynia",
                            ContactNumber = "333444555",
                            DateOfBirth = new DateTime(1994, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pawel@kowalksi.pl",
                            FirstName = "Paweł",
                            LastName = "Lelek",
                            PostalCode = "81-110",
                            Street = "Grunwaldzka"
                        },
                        new
                        {
                            Id = 3,
                            City = "Sopot",
                            ContactNumber = "888111222",
                            DateOfBirth = new DateTime(1974, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "piotr@kowalksi.pl",
                            FirstName = "Piotr",
                            LastName = "Kaminski",
                            PostalCode = "82-110",
                            Street = "Grunwaldzka"
                        },
                        new
                        {
                            Id = 4,
                            City = "Rumia",
                            ContactNumber = "888336666",
                            DateOfBirth = new DateTime(1954, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jan@sss.pl",
                            FirstName = "Wiesław",
                            LastName = "XXX",
                            PostalCode = "85-110",
                            Street = "Grunwaldzka"
                        },
                        new
                        {
                            Id = 5,
                            City = "Żukowo",
                            ContactNumber = "888333231",
                            DateOfBirth = new DateTime(1934, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jan@kfff.pl",
                            FirstName = "Olek",
                            LastName = "Misztal",
                            PostalCode = "86-110",
                            Street = "Grunwaldzka"
                        });
                });

            modelBuilder.Entity("LibraryApp.Entities.Book", b =>
                {
                    b.HasOne("LibraryApp.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("LibraryApp.Entities.BookCopy", b =>
                {
                    b.HasOne("LibraryApp.Entities.Book", "Book")
                        .WithMany("bookCopies")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryApp.Entities.Rental", b =>
                {
                    b.HasOne("LibraryApp.Entities.BookCopy", "BookCopy")
                        .WithMany()
                        .HasForeignKey("BookCopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Entities.User", "User")
                        .WithMany("rentals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookCopy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryApp.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryApp.Entities.Book", b =>
                {
                    b.Navigation("bookCopies");
                });

            modelBuilder.Entity("LibraryApp.Entities.User", b =>
                {
                    b.Navigation("rentals");
                });
#pragma warning restore 612, 618
        }
    }
}

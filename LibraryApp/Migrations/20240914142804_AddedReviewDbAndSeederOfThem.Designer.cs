// <auto-generated />
using System;
using LibraryApp.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryApp.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20240914142804_AddedReviewDbAndSeederOfThem")]
    partial class AddedReviewDbAndSeederOfThem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryApp.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1530, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jan",
                            LastName = "Kochanowski"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1898, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jan",
                            LastName = "Brzechwa"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1923, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Wisława",
                            LastName = "Szymborska"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1921, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Stanisław",
                            LastName = "Lem"
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1966, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Marek",
                            LastName = "Krajweski"
                        });
                });

            modelBuilder.Entity("LibraryApp.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Jest to fraszka napisana na zdrowie i dla zdrowia wszystkich",
                            Title = "Na zdrowie"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CreatedDate = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Jest to pieśń o Sobótce",
                            Title = "Pieśń świętojańska o Sobótce"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            CreatedDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bajka dla dzieci o leniu co nić nie robi cały dzień",
                            Title = "Leń"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bardzo zabawna rymowanka o nieistniejących wyspach",
                            Title = "Na wyspach Bergamutach"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            CreatedDate = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Najpopularniejszym chyba wierszem",
                            Title = "Nic dwa razy się nie zdarza/ i nie zdarzy"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 4,
                            CreatedDate = new DateTime(2021, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "To najsłynniejsza powieść Stanisława Lema",
                            Title = "Solaris"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 5,
                            CreatedDate = new DateTime(2020, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Zbiór opowiadań o komisarzu Popielskim",
                            Title = "Erynie"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 5,
                            CreatedDate = new DateTime(1999, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Zbiór opowiadań o komisarzu Mocku",
                            Title = "Śmierć w Breslau"
                        });
                });

            modelBuilder.Entity("LibraryApp.Entities.BookCopy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("EAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookCopies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            EAN = "5012345678900",
                            Quantity = 50
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            EAN = "9780201379624",
                            Quantity = 50
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            EAN = "8000500310429",
                            Quantity = 510
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            EAN = "4029764001805",
                            Quantity = 10
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            EAN = "3800029146455",
                            Quantity = 100
                        },
                        new
                        {
                            Id = 6,
                            BookId = 6,
                            EAN = "8710123456789",
                            Quantity = 320
                        },
                        new
                        {
                            Id = 7,
                            BookId = 7,
                            EAN = "5051234567894",
                            Quantity = 99
                        },
                        new
                        {
                            Id = 8,
                            BookId = 8,
                            EAN = "4006381333931",
                            Quantity = 111
                        });
                });

            modelBuilder.Entity("LibraryApp.Entities.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookCopyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfLoan")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfReturn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookCopyId");

                    b.HasIndex("UserId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookCopyId = 1,
                            DateOfLoan = new DateTime(2024, 9, 14, 16, 28, 4, 348, DateTimeKind.Local).AddTicks(5484),
                            DateOfReturn = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 0m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookCopyId = 1,
                            DateOfLoan = new DateTime(2024, 9, 14, 16, 28, 4, 348, DateTimeKind.Local).AddTicks(5522),
                            DateOfReturn = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 0m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookCopyId = 1,
                            DateOfLoan = new DateTime(2024, 9, 14, 16, 28, 4, 348, DateTimeKind.Local).AddTicks(5526),
                            DateOfReturn = new DateTime(2024, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 0m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            BookCopyId = 1,
                            DateOfLoan = new DateTime(2024, 9, 14, 16, 28, 4, 348, DateTimeKind.Local).AddTicks(5532),
                            DateOfReturn = new DateTime(2024, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 0m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            BookCopyId = 1,
                            DateOfLoan = new DateTime(2024, 9, 14, 16, 28, 4, 348, DateTimeKind.Local).AddTicks(5537),
                            DateOfReturn = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 0m,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            BookCopyId = 1,
                            DateOfLoan = new DateTime(2024, 9, 14, 16, 28, 4, 348, DateTimeKind.Local).AddTicks(5540),
                            DateOfReturn = new DateTime(2024, 10, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 0m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            BookCopyId = 1,
                            DateOfLoan = new DateTime(2024, 9, 14, 16, 28, 4, 348, DateTimeKind.Local).AddTicks(5544),
                            DateOfReturn = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 0m,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("LibraryApp.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            Rating = 3,
                            ReviewContent = "Książka mi się podoba, ale jakoś nie super",
                            ReviewerName = "Wiesiek"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            Rating = 4,
                            ReviewContent = "Mi tam się to podobało, całkiem przyjemne",
                            ReviewerName = "Wiesia"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 2,
                            Rating = 5,
                            ReviewContent = "Piękna książka, wprowadza w magiczny klimat",
                            ReviewerName = "Kasia"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 2,
                            Rating = 3,
                            ReviewContent = "Trochę nużąca, ale zakończenie rewelacyjne",
                            ReviewerName = "Andrzej"
                        },
                        new
                        {
                            Id = 5,
                            BookId = 3,
                            Rating = 5,
                            ReviewContent = "Leń to mój ulubiony bohater! Świetna bajka",
                            ReviewerName = "Bartek"
                        },
                        new
                        {
                            Id = 6,
                            BookId = 3,
                            Rating = 4,
                            ReviewContent = "Dzieci uwielbiają, ale ja jako rodzic trochę się nudziłem",
                            ReviewerName = "Monika"
                        },
                        new
                        {
                            Id = 7,
                            BookId = 4,
                            Rating = 3,
                            ReviewContent = "Rymowanka wpada w ucho, ale fabuła mogłaby być lepsza",
                            ReviewerName = "Łukasz"
                        },
                        new
                        {
                            Id = 8,
                            BookId = 4,
                            Rating = 5,
                            ReviewContent = "Cudownie się czytało, Bergamuty to moje marzenie",
                            ReviewerName = "Alicja"
                        },
                        new
                        {
                            Id = 9,
                            BookId = 5,
                            Rating = 5,
                            ReviewContent = "Głęboki i przemyślany wiersz, Szymborska jak zawsze świetna",
                            ReviewerName = "Anna"
                        },
                        new
                        {
                            Id = 10,
                            BookId = 5,
                            Rating = 4,
                            ReviewContent = "Nic dwa razy – coś w tym jest, polecam każdemu",
                            ReviewerName = "Jan"
                        },
                        new
                        {
                            Id = 11,
                            BookId = 6,
                            Rating = 5,
                            ReviewContent = "Solaris to klasyk! Czasem zawiła, ale bardzo wartościowa",
                            ReviewerName = "Piotr"
                        },
                        new
                        {
                            Id = 12,
                            BookId = 6,
                            Rating = 3,
                            ReviewContent = "Niektóre fragmenty trudne do zrozumienia, ale ogólnie OK",
                            ReviewerName = "Marcin"
                        },
                        new
                        {
                            Id = 13,
                            BookId = 7,
                            Rating = 5,
                            ReviewContent = "Erynie to mocna powieść, wciągnęła mnie od pierwszych stron",
                            ReviewerName = "Karol"
                        },
                        new
                        {
                            Id = 14,
                            BookId = 7,
                            Rating = 4,
                            ReviewContent = "Mroczna atmosfera, nie dla każdego, ale mi się podobało",
                            ReviewerName = "Zofia"
                        },
                        new
                        {
                            Id = 15,
                            BookId = 8,
                            Rating = 5,
                            ReviewContent = "Śmierć w Breslau to świetny kryminał, pełen zwrotów akcji",
                            ReviewerName = "Robert"
                        },
                        new
                        {
                            Id = 16,
                            BookId = 8,
                            Rating = 3,
                            ReviewContent = "Dobrze napisane, choć momentami przewidywalne",
                            ReviewerName = "Marta"
                        },
                        new
                        {
                            Id = 17,
                            BookId = 4,
                            Rating = 5,
                            ReviewContent = "Zabawna i lekka, świetna na relaks",
                            ReviewerName = "Paweł"
                        },
                        new
                        {
                            Id = 18,
                            BookId = 2,
                            Rating = 4,
                            ReviewContent = "Sobótka ma w sobie coś magicznego, polecam",
                            ReviewerName = "Agnieszka"
                        },
                        new
                        {
                            Id = 19,
                            BookId = 3,
                            Rating = 5,
                            ReviewContent = "Leń to idealna książka na wieczorne czytanie z dziećmi",
                            ReviewerName = "Tomek"
                        },
                        new
                        {
                            Id = 20,
                            BookId = 6,
                            Rating = 3,
                            ReviewContent = "Solaris jest dla mnie zbyt trudne, ale doceniam pomysł",
                            ReviewerName = "Ewa"
                        },
                        new
                        {
                            Id = 21,
                            BookId = 1,
                            Rating = 3,
                            ReviewContent = "Niezbyt wciągająca, ale cenię klasykę",
                            ReviewerName = "Adam"
                        },
                        new
                        {
                            Id = 22,
                            BookId = 1,
                            Rating = 4,
                            ReviewContent = "Zdecydowanie warta przeczytania, mimo że trochę krótka",
                            ReviewerName = "Ewelina"
                        },
                        new
                        {
                            Id = 23,
                            BookId = 1,
                            Rating = 2,
                            ReviewContent = "Nie do końca rozumiem przesłanie",
                            ReviewerName = "Tomasz"
                        },
                        new
                        {
                            Id = 24,
                            BookId = 1,
                            Rating = 4,
                            ReviewContent = "Podobało mi się podejście do tematu zdrowia",
                            ReviewerName = "Julia"
                        },
                        new
                        {
                            Id = 25,
                            BookId = 1,
                            Rating = 5,
                            ReviewContent = "Lekka i przyjemna lektura na wieczór",
                            ReviewerName = "Ola"
                        },
                        new
                        {
                            Id = 26,
                            BookId = 2,
                            Rating = 5,
                            ReviewContent = "Wspaniała atmosfera, bardzo klimatyczna książka",
                            ReviewerName = "Kinga"
                        },
                        new
                        {
                            Id = 27,
                            BookId = 2,
                            Rating = 5,
                            ReviewContent = "Magia Sobótki jest nie do opisania",
                            ReviewerName = "Michał"
                        },
                        new
                        {
                            Id = 28,
                            BookId = 2,
                            Rating = 3,
                            ReviewContent = "Ciekawe, ale momentami zbyt rozwlekłe",
                            ReviewerName = "Grzegorz"
                        },
                        new
                        {
                            Id = 29,
                            BookId = 2,
                            Rating = 4,
                            ReviewContent = "Bardzo mi się podobała, choć końcówka mogłaby być lepsza",
                            ReviewerName = "Patrycja"
                        },
                        new
                        {
                            Id = 30,
                            BookId = 2,
                            Rating = 5,
                            ReviewContent = "Arcydzieło w swoim rodzaju",
                            ReviewerName = "Barbara"
                        },
                        new
                        {
                            Id = 31,
                            BookId = 3,
                            Rating = 5,
                            ReviewContent = "Moje dzieci uwielbiają tę książkę, śmiejemy się za każdym razem",
                            ReviewerName = "Katarzyna"
                        },
                        new
                        {
                            Id = 32,
                            BookId = 3,
                            Rating = 4,
                            ReviewContent = "Świetna zabawa dla najmłodszych, dużo humoru",
                            ReviewerName = "Artur"
                        },
                        new
                        {
                            Id = 33,
                            BookId = 3,
                            Rating = 3,
                            ReviewContent = "Sympatyczna bajka, ale bez większych rewelacji",
                            ReviewerName = "Paweł"
                        },
                        new
                        {
                            Id = 34,
                            BookId = 3,
                            Rating = 5,
                            ReviewContent = "Prosta i urocza historia o leniu, który nic nie robi",
                            ReviewerName = "Natalia"
                        },
                        new
                        {
                            Id = 35,
                            BookId = 3,
                            Rating = 3,
                            ReviewContent = "Przyjemna, ale szybko się nudzi",
                            ReviewerName = "Robert"
                        },
                        new
                        {
                            Id = 36,
                            BookId = 4,
                            Rating = 5,
                            ReviewContent = "Fantastyczna podróż do wysp, których nie ma!",
                            ReviewerName = "Piotr"
                        },
                        new
                        {
                            Id = 37,
                            BookId = 4,
                            Rating = 4,
                            ReviewContent = "Idealna na relaks, pełna rymowanek i zabawy",
                            ReviewerName = "Karolina"
                        },
                        new
                        {
                            Id = 38,
                            BookId = 4,
                            Rating = 3,
                            ReviewContent = "Trochę przesadzona, ale dzieciom się spodobała",
                            ReviewerName = "Magdalena"
                        },
                        new
                        {
                            Id = 39,
                            BookId = 4,
                            Rating = 5,
                            ReviewContent = "Klasyka polskiej literatury dla dzieci, bez wątpienia",
                            ReviewerName = "Dawid"
                        },
                        new
                        {
                            Id = 40,
                            BookId = 4,
                            Rating = 3,
                            ReviewContent = "Dla mnie zbyt dziecinna, ale dla maluchów super",
                            ReviewerName = "Anna"
                        },
                        new
                        {
                            Id = 41,
                            BookId = 5,
                            Rating = 5,
                            ReviewContent = "Wspaniały wiersz, poruszający do głębi",
                            ReviewerName = "Marta"
                        },
                        new
                        {
                            Id = 42,
                            BookId = 5,
                            Rating = 5,
                            ReviewContent = "Każde słowo ma swoje miejsce, nic dodać, nic ująć",
                            ReviewerName = "Aleksander"
                        },
                        new
                        {
                            Id = 43,
                            BookId = 5,
                            Rating = 4,
                            ReviewContent = "Trochę melancholijny, ale piękny",
                            ReviewerName = "Dorota"
                        },
                        new
                        {
                            Id = 44,
                            BookId = 5,
                            Rating = 5,
                            ReviewContent = "Chwytający za serce, zawsze mnie porusza",
                            ReviewerName = "Ewa"
                        },
                        new
                        {
                            Id = 45,
                            BookId = 5,
                            Rating = 5,
                            ReviewContent = "Zawsze wracam do tego wiersza, jest wyjątkowy",
                            ReviewerName = "Jacek"
                        },
                        new
                        {
                            Id = 46,
                            BookId = 6,
                            Rating = 5,
                            ReviewContent = "Złożona, ale genialna powieść, klasyk science fiction",
                            ReviewerName = "Łukasz"
                        },
                        new
                        {
                            Id = 47,
                            BookId = 6,
                            Rating = 4,
                            ReviewContent = "Niesamowite opisy świata, choć fabuła niełatwa",
                            ReviewerName = "Mateusz"
                        },
                        new
                        {
                            Id = 48,
                            BookId = 6,
                            Rating = 4,
                            ReviewContent = "Solaris jest niezwykła, ale trzeba się wczytać",
                            ReviewerName = "Iwona"
                        },
                        new
                        {
                            Id = 49,
                            BookId = 6,
                            Rating = 5,
                            ReviewContent = "Dla fanów Lema to lektura obowiązkowa",
                            ReviewerName = "Bartek"
                        },
                        new
                        {
                            Id = 50,
                            BookId = 6,
                            Rating = 5,
                            ReviewContent = "Zaskakująca i oryginalna, nie da się zapomnieć",
                            ReviewerName = "Joanna"
                        },
                        new
                        {
                            Id = 51,
                            BookId = 7,
                            Rating = 5,
                            ReviewContent = "Świetny kryminał, Krajewski to mistrz",
                            ReviewerName = "Dominik"
                        },
                        new
                        {
                            Id = 52,
                            BookId = 7,
                            Rating = 5,
                            ReviewContent = "Atmosfera Lwowa wciąga, mroczna i niepokojąca",
                            ReviewerName = "Zuzanna"
                        },
                        new
                        {
                            Id = 53,
                            BookId = 7,
                            Rating = 3,
                            ReviewContent = "Dobrze napisane, choć momentami przewidywalne",
                            ReviewerName = "Kamil"
                        },
                        new
                        {
                            Id = 54,
                            BookId = 7,
                            Rating = 4,
                            ReviewContent = "Nie dla każdego, ale mi się podobało",
                            ReviewerName = "Emilia"
                        },
                        new
                        {
                            Id = 55,
                            BookId = 7,
                            Rating = 5,
                            ReviewContent = "Trzyma w napięciu od początku do końca",
                            ReviewerName = "Marek"
                        },
                        new
                        {
                            Id = 56,
                            BookId = 8,
                            Rating = 5,
                            ReviewContent = "Rewelacyjny kryminał, pełen zwrotów akcji",
                            ReviewerName = "Natalia"
                        },
                        new
                        {
                            Id = 57,
                            BookId = 8,
                            Rating = 5,
                            ReviewContent = "Zaskakujący, mroczny i wciągający",
                            ReviewerName = "Daniel"
                        },
                        new
                        {
                            Id = 58,
                            BookId = 8,
                            Rating = 5,
                            ReviewContent = "Czytałem jednym tchem, trudno się oderwać",
                            ReviewerName = "Artur"
                        },
                        new
                        {
                            Id = 59,
                            BookId = 8,
                            Rating = 4,
                            ReviewContent = "Styl autora trochę zbyt ciężki, ale fabuła świetna",
                            ReviewerName = "Kasia"
                        },
                        new
                        {
                            Id = 60,
                            BookId = 8,
                            Rating = 5,
                            ReviewContent = "Uwielbiam takie klimaty, Breslau ma niesamowity urok",
                            ReviewerName = "Tomasz"
                        });
                });

            modelBuilder.Entity("LibraryApp.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Gdańsk",
                            ContactNumber = "888333222",
                            DateOfBirth = new DateTime(1984, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jan@kowalksi.pl",
                            FirstName = "Jan",
                            LastName = "Kowalski",
                            PostalCode = "80-110",
                            Street = "Grunwaldzka"
                        },
                        new
                        {
                            Id = 2,
                            City = "Gdynia",
                            ContactNumber = "333444555",
                            DateOfBirth = new DateTime(1994, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pawel@kowalksi.pl",
                            FirstName = "Paweł",
                            LastName = "Lelek",
                            PostalCode = "81-110",
                            Street = "Grunwaldzka"
                        },
                        new
                        {
                            Id = 3,
                            City = "Sopot",
                            ContactNumber = "888111222",
                            DateOfBirth = new DateTime(1974, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "piotr@kowalksi.pl",
                            FirstName = "Piotr",
                            LastName = "Kaminski",
                            PostalCode = "82-110",
                            Street = "Grunwaldzka"
                        },
                        new
                        {
                            Id = 4,
                            City = "Rumia",
                            ContactNumber = "888336666",
                            DateOfBirth = new DateTime(1954, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jan@sss.pl",
                            FirstName = "Wiesław",
                            LastName = "XXX",
                            PostalCode = "85-110",
                            Street = "Grunwaldzka"
                        },
                        new
                        {
                            Id = 5,
                            City = "Żukowo",
                            ContactNumber = "888333231",
                            DateOfBirth = new DateTime(1934, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jan@kfff.pl",
                            FirstName = "Olek",
                            LastName = "Misztal",
                            PostalCode = "86-110",
                            Street = "Grunwaldzka"
                        });
                });

            modelBuilder.Entity("LibraryApp.Entities.Book", b =>
                {
                    b.HasOne("LibraryApp.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("LibraryApp.Entities.BookCopy", b =>
                {
                    b.HasOne("LibraryApp.Entities.Book", "Book")
                        .WithMany("bookCopies")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryApp.Entities.Rental", b =>
                {
                    b.HasOne("LibraryApp.Entities.BookCopy", "BookCopy")
                        .WithMany()
                        .HasForeignKey("BookCopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Entities.User", "User")
                        .WithMany("rentals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookCopy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryApp.Entities.Review", b =>
                {
                    b.HasOne("LibraryApp.Entities.Book", "Book")
                        .WithMany("reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryApp.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryApp.Entities.Book", b =>
                {
                    b.Navigation("bookCopies");

                    b.Navigation("reviews");
                });

            modelBuilder.Entity("LibraryApp.Entities.User", b =>
                {
                    b.Navigation("rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
